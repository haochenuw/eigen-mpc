#include <obliv.oh>
#include "fixed.oh"


size_t ceildiv(size_t dividend, size_t divisor) {
	return (dividend + divisor - 1) / divisor;
}

#if !(BIT_WIDTH_32)
void obig_max(obig *a) obliv {
	for(size_t i = 0; i < a->digits; i++) {
		if(i < a->digits - 1) {
			a->data[i] = (uint8_t) 0xFF;
		} else {
			a->data[i] = (uint8_t) 0x7F; // msb zero 
		}
	}
}
#endif

// checks if 'in' is greater than ofixed_max or less than -ofixed_max
// and sets 'out' to the respecitve limit if that's the case, and to 'in' 
// otherwise
void ofixed_check_overflow(ofixed_t *out, ofixed_t in) obliv {
#if BIT_WIDTH_32
	obliv if(in > (obliv int64_t) INT32_MAX) {
		*out = INT32_MAX;
	} else obliv if(in < (obliv int64_t) INT32_MIN) {
		*out = INT32_MIN;
	} else {
		*out = in;
	}
#else
//	obig_copy(out, in); 
//	return; // assume overflows don't happen
	if(in.digits <= out->digits) {
		obig_copy_signed(out, in); // definitely fits, just copy
		return;
	}
	obig temp, max;
	obig *tempptr = &temp;
	~obliv() obig_init(&temp, in.digits);
	~obliv() obig_init(&max, out->digits);
	obig_max(&max);
	obliv bool overflowed = false;
	obliv if(!obig_ltz_signed(in)) {
		// check overflows by checking if higher bytes are all zero
		for(size_t i = out->digits; i < in.digits; i++) {
			obliv if(in.data[i] != 0) {
				overflowed = true;
			}
		}
		obliv if(overflowed) {
			obig_copy_signed(out, max);
		}
	} else {
			// check overflows by checking if higher bytes are all 0xFF
			for(size_t i = out->digits; i < in.digits; i++) {
				obliv if(in.data[i] != (uint8_t) 0xFF) {
					overflowed = true;
				}
			}
		obliv if(overflowed) {
			obig_neg_signed(out, max); // min = -max
		}
	}
	obliv if(!overflowed) {
		obig_copy_signed(out, in);
	}
	~obliv() obig_free(&temp);
	~obliv() obig_free(&max);
#endif
}




obliv int8_t ofixed_cmp(ofixed_t a, ofixed_t b) obliv {
#if BIT_WIDTH_32
	obliv int8_t result = 0;
	obliv if(a < b) result = -1;
	obliv if(a > b) result = 1;
	return result;
#else
	return obig_cmp(a, b);
#endif
	
}

void ofixed_abs(ofixed_t *out, ofixed_t a) obliv {
#if BIT_WIDTH_32
	obliv if(a < 0) *out = 0-a; // unary minus not defined for "obliv" types?
	else *out = a;
#else
	obig_abs(out, a);
#endif
}

void ofixed_add(ofixed_t *out, ofixed_t a, ofixed_t b) obliv {
#if BIT_WIDTH_32
	*out = a + b;
#else
	obig temp;
	~obliv() obig_init(&temp, (a.digits > b.digits ? a : b).digits + 1);
	obig_add_signed(&temp, a, b);	
	obig_copy(out, temp);
	~obliv() obig_free(&temp);
#endif
}

void ofixed_sub(ofixed_t *out, ofixed_t a, ofixed_t b) obliv {
#if BIT_WIDTH_32
	*out = a - b;
#else
	obig temp;
	~obliv() obig_init(&temp, (a.digits > b.digits ? a : b).digits + 1);
	obig_sub_signed(&temp, a, b);	
	obig_copy(out, temp);
	~obliv() obig_free(&temp);
#endif
}


void ofixed_inner_product(ofixed_t *out, ofixed_t *a, ofixed_t *b, size_t p, size_t d) obliv {
#if BIT_WIDTH_32
	obliv int64_t temp;
	for(size_t i = 0; i < d; i++) {
		temp += (obliv int64_t) a[i] * (obliv int64_t) b[i];
	}
	*out = temp >> p;
#else
	obig temp1, temp2, temp3;
	~obliv() obig_init(&temp1, a[0].digits + b[0].digits + d);
	~obliv() obig_init(&temp2, a[0].digits + b[0].digits);
	~obliv() obig_init(&temp3, a[0].digits + b[0].digits);
	obig_zero(&temp1);
	for(size_t i = 0; i < d; i++) {
		obig_mul_signed(&temp2, a[i], b[i]);
		ofixed_add(&temp1, temp1, temp2);
	}
	obig_shr_native_signed(&temp3, temp1, p);
	obig_copy(out, temp3);
	~obliv() obig_free(&temp1);
	~obliv() obig_free(&temp2);
	~obliv() obig_free(&temp3);
#endif
}

void ofixed_mul(ofixed_t *out, ofixed_t a, ofixed_t b, size_t p) obliv {
#if BIT_WIDTH_32
	*out = ((obliv int64_t) a * (obliv int64_t) b) >> p;
#else
	obig temp, temp2;
	~obliv() obig_init(&temp, a.digits + b.digits);
	~obliv() obig_init(&temp2, a.digits + b.digits);
	obig_mul_signed(&temp, a, b);
	obig_shr_native_signed(&temp2, temp, p);
	obig_copy(out, temp2);
	~obliv() obig_free(&temp);
	~obliv() obig_free(&temp2);
#endif
}

obliv bool ofixed_inv(ofixed_t *out, ofixed_t b, size_t p) obliv {
     obig const_one; 
     ~obliv() obig_init(&const_one, b.digits + ceildiv(p,8));
     // setting to one
     ~obliv() obig_one(&const_one);
     return ofixed_div(out, const_one, b, p);
}




obliv bool ofixed_div(ofixed_t *out, ofixed_t a, ofixed_t b, size_t p) obliv {
#if BIT_WIDTH_32
	*out = ((obliv int64_t) a << p) / (obliv int64_t) b;
	return true;
#else
	obig temp, temp2, *tempptr = &temp, *temp2ptr = &temp2;
	obliv bool result;
	~obliv() obig_init(&temp, a.digits + ceildiv(p,8));
	~obliv() obig_init(&temp2, a.digits + ceildiv(p,8));
/*	obliv if(obig_eqz(b)) { // handle division by zero
		obliv bool a_neg = obig_ltz_signed(a);
		ofixed_max(out);
		obliv if(a_neg) {
			obig_neg(out, *out);
		}
	} else {*/
		obig_shl_native_signed(tempptr, a, p);
		result = obig_div_mod_signed(temp2ptr, NULL, temp, b);
		obig_copy(out, temp2);
/*	}*/
	~obliv() obig_free(&temp);
	~obliv() obig_free(&temp2);
	return result;
#endif
}

obliv bool ofixed_div_overflow(ofixed_t *out, ofixed_t a, ofixed_t b, size_t p) obliv {
#if BIT_WIDTH_32
	obliv int64_t temp = ((obliv int64_t) a << p) / (obliv int64_t) b;
	ofixed_check_overflow(out, temp);
	return true;
#else
	obig temp, temp2, *tempptr = &temp, *temp2ptr = &temp2;
	obliv bool result;
	~obliv() obig_init(&temp, a.digits + ceildiv(p,8));
	~obliv() obig_init(&temp2, a.digits + ceildiv(p,8));
/*	obliv if(obig_eqz(b)) { // handle division by zero
		obliv bool a_neg = obig_ltz_signed(a);
		ofixed_max(out);
		obliv if(a_neg) {
			obig_neg(out, *out);
		}
	} else {*/
		obig_shl_native_signed(tempptr, a, p);
		result = obig_div_mod_signed(temp2ptr, NULL, temp, b);
		ofixed_check_overflow(out, temp2);
/*	}*/
	~obliv() obig_free(&temp);
	~obliv() obig_free(&temp2);
	return result;
#endif
}

#if BIT_WIDTH_32
// returns a mask of the lowest (FIXED_BIT_SIZE + p) bits.
// saves garbled gates for some operations
static int64_t fixed_mask(int p) {
	return ((1ll << (FIXED_BIT_SIZE + p)) - 1);
}
#endif

void ofixed_sqrt(ofixed_t *out, ofixed_t a, size_t p) obliv {
#if BIT_WIDTH_32
	// limit number of bits
	int64_t mask;
	~obliv() mask = fixed_mask(p);
	obliv int64_t x = ((obliv int64_t) a << p) & mask;
	obliv int64_t r = 0;
	for(int64_t e = mask + 1; e != 0; e >>= 2) {
		obliv if((x & mask) >= ((r + e) & mask)) {
			x -= r + e;
			r = ((r >> 1) + e) & mask;
		} else {
			r = r >> 1;
		}
	}
	*out = r;
#else
	obig temp;
	~obliv() obig_init(&temp, a.digits + ceildiv(p,8));
	obig_shl_native_signed(&temp, a, p);
	obig_sqrt(out, temp);
	~obliv() obig_free(&temp);
#endif
}





void ofixed_init(ofixed_t *a) {
#if BIT_WIDTH_32
	*a = 0;
	return;
#else
	obig_init(a, FIXED_BIT_SIZE / 8);
#endif
}

void ofixed_free(ofixed_t *a) {
#if BIT_WIDTH_32
	return;
#else
	obig_free(a);
#endif
}

void ofixed_import(ofixed_t *a, obliv fixed_t b) {
#if BIT_WIDTH_32
	*a = b;
#else
	obig_import_onative_signed(a, b);
#endif
}

obliv fixed_t ofixed_export(ofixed_t a) {
#if BIT_WIDTH_32
	return a;
#else
	return obig_export_onative_signed(a);
#endif
}

void ofixed_copy(ofixed_t *a, ofixed_t b) obliv {
#if BIT_WIDTH_32
	*a = b;
#else
	obig_copy_signed(a, b);
#endif
}

void ofixed_reveal(fixed_t *out, ofixed_t a, int party) {
	obliv fixed_t temp = ofixed_export(a);
#if BIT_WIDTH_32
	revealOblivInt(out, temp, party);
#else
	revealOblivLLong(out, temp, party);
#endif
}
